require_relative 'analyze_city'
require_relative '../src/cluster'
require_relative '../src/store-meta'
require 'date'

file 'city-event.json' do |t|
  target = t.name
  puts "generating #{target}"

  city = Masaki::Players::fetch_event_list.find_all {|x|
    title = x['event_title']
    (! title.include?('エクストラ')) && (
      title.start_with?("シティリーグ") ||
      title.start_with?("チャンピオンズリーグ") ||
      title.start_with?("ビクティニBWR") ||
      title.include?('ポケモンジャパンチャンピオンシップス')
    )
  }
  File.write(target, city.to_json)
end

file 'city-deck-date.json' => ['city-event.json'] do |t|
  target = t.name
  puts "generating #{target}"

  event_list ||= JSON.parse(File.read('city-event.json'))
  keys = event_list.map {|x| x['event_holding_id']}

  db = Masaki::KVSCache.new("city_result")
  events = keys.map do |key|
    cache = db.fetch(key)
    if cache
      page = cache
    else
      page = Masaki::Players::fetch_result_page(key)
      unless page
        pp [:skip, key]
        next
      end
      db.store(key, page)
    end
    JSON.parse(page)
  end
  db.close

  decks = []
  events.each do |ev|
    next unless ev
    decks += Masaki::Players::parse(ev)
  end

  Masaki::Analyze.import_deck(decks)

  File.write(target, decks.to_json)
  pp decks.size
end

task :world => [:city_deck_and_date] do |t|
  $world = MasakiWorld.new
end

task :city_deck_and_date => ['city-deck-date.json'] do |t|
  $city_deck_and_date = JSON.parse(File.read('city-deck-date.json'))
end

task :clean do
  File.unlink('city-event.json') rescue nil
  File.unlink('report_rough.json') rescue nil
end

file 'city-weekly.dump' => [:world] do |t|
  target = t.name
  puts "generating #{target}"

  s = Time.now
  it = Masaki::Analyze.weekly_analyze($world, $city_deck_and_date)
  pp [:weekly_analyze, (Time.now - s).to_f]
  File.open(target, "w") {|fp| Marshal.dump(it, fp)}
end

task :default => ['city-weekly.dump'] do
end